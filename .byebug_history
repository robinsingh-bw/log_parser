c
arr.each { |a| p a[1].count }
arr.each { |a| p a.second.count }
arr.each { |a| p a.first }
arr.first.first
arr.first
arr.sort_by{|a| puts a.count}.count
arr.sort_by{|a| puts a.count}
arr.sort_by{|a| a}
arr.class
arr.sort_by{ |a| a[1] }.reverse
arr.count
arr.keys
arr
c
array.second
array = [1,2,3]
parser.top_viewed
parser = LogParser::Parser.from_file ARGV[0]
require './lib/log_parser/parser.rb'
require './lib/log_parser/entry.rb'
c
require './lib/log_parser/parser.rb'
parser.entries.group_by(&:url).first
parser.entries.group_by &:url
parser.group_by &:url
parser.top_viewed.first
parser.top_viewed.count
parser.top_viewed
parser.entries.count
parser
parser = LogParser::Parser.from_file ARGV[0]
require './lib/log_parser/parser.rb'
require './lib/log_parser/entry.rb'
require 'lib/log_parser/entry.rb'
parser = LogParser::Parser.from_file ARGV[0]
c
unique_views.count
unique_views
all_views
c
all_views.sort_by { |page, count| count }
c
all_views
c
unique_views
all_views
c
data.split("\n")
data.split("\n").count
data.split('\n/').count
data.split('\n').count
data.split('\n')
data.count
data
